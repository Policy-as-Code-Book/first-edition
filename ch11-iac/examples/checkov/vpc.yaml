AWSTemplateFormatVersion: 2010-09-09
Description: >-
  VPC networking, creates VPC, 6 subnets (3 public/3 private) in first 3 AZs of region, IGW and NAT-GW
Metadata:
  LICENSE: Apache License, Version 2.0
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Details
        Parameters:
          - VpcCidr
          - SubnetSize
    ParameterLabels:
      VpcCidr:
        default: VPC CIDR Block
      SubnetSize:
        default: Subnet Size (# of IPs) 
Parameters:
  VpcCidr:
    Description: VPC CIDR Block
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
  SubnetSize:
    Description: Subnet Size in IPs (small=512, medium=1024, large=2048, xlarge=4096)
    Type: String
    Default: small
    AllowedValues:
      - small
      - medium
      - large
      - xlarge

Mappings:
  subnets:
    ip-sizes:
      small: 9    #512
      medium: 10  #1024
      large: 11   #2048
      xlarge: 12  #4096

Resources:
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/InternetGateway'
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - NATIP
        - AllocationId
      SubnetId: !Ref SubnetPublic1
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NATGateway'
  NATIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NATIP'
  NATPrivateSubnetRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable1
  NATPrivateSubnetRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable2
  NATPrivateSubnetRoute3:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable3
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTable1'
      VpcId: !Ref VPC
  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTable2'
      VpcId: !Ref VPC
  PrivateRouteTable3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTable3'
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PublicRouteTable'
      VpcId: !Ref VPC
  PublicSubnetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - VPCGatewayAttachment
  RouteTableAssociationPrivate1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref SubnetPrivate1
  RouteTableAssociationPrivate2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref SubnetPrivate2
  RouteTableAssociationPrivate3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref SubnetPrivate3
  RouteTableAssociationPublic1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic1
  RouteTableAssociationPublic2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic2
  RouteTableAssociationPublic3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic3
  SubnetPrivate1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 6, !FindInMap [subnets, "ip-sizes", !Ref SubnetSize] ]]
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivate1'
      VpcId: !Ref VPC
  SubnetPrivate2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 6, !FindInMap [subnets, "ip-sizes", !Ref SubnetSize] ]]
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivate2'
      VpcId: !Ref VPC
  SubnetPrivate3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select: 
          - 2
          - Fn::GetAZs: ""
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 6, !FindInMap [subnets, "ip-sizes", !Ref SubnetSize] ]]
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivate3'
      VpcId: !Ref VPC
  SubnetPublic1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 6, !FindInMap [subnets, "ip-sizes", !Ref SubnetSize] ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublic1'
      VpcId: !Ref VPC
  SubnetPublic2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt VPC.CidrBlock, 6, !FindInMap [subnets, "ip-sizes", !Ref SubnetSize] ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublic2'
      VpcId: !Ref VPC
  SubnetPublic3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select: 
          - 2
          - Fn::GetAZs: ""
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt VPC.CidrBlock, 6, !FindInMap [subnets, "ip-sizes", !Ref SubnetSize] ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublic3'
      VpcId: !Ref VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/VPC'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  Port80OpenSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
    GroupDescription: Allow port 80 inbound
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow port 80 inbound
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref VPC
Outputs:
  FeatureNATMode:
    Value: Single
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  PublicSubnet1:
    Description: Public subnet 1
    Value: !Ref 'SubnetPublic1'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet1' ] ]
  PublicSubnet2:
    Description: Public subnet 2
    Value: !Ref 'SubnetPublic2'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet2' ] ]
  PublicSubnet3:
    Description: Public subnet 3
    Value: !Ref 'SubnetPublic3'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet3' ] ]
  PrivateSubnet1:
    Description: Private subnet 1
    Value: !Ref 'SubnetPrivate1'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnet1' ] ]
  PrivateSubnet2:
    Description: Private subnet 2
    Value: !Ref 'SubnetPrivate2'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnet2' ] ]
  PrivateSubnet3:
    Description: Private subnet 3
    Value: !Ref 'SubnetPrivate3'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnet3' ] ]
