apiVersion: v1
kind: Namespace
metadata:
  name: magtape-system
  labels:
    app: magtape

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: magtape-write
  labels:
    app: magtape
rules:
- apiGroups:
  - admissionregistration.k8s.io
  - certificates.k8s.io
  - events.k8s.io
  - ""
  resources:
    - validatingwebhookconfigurations
    - certificatesigningrequests
    - certificatesigningrequests/approval
    - certificatesigningrequests/status
    - events
    - signers
  verbs:
    - get
    - list
    - watch
    - create
    - patch
    - update
    - delete
    - approve
    - sign

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: magtape-read
  labels:
    app: magtape
rules:
- apiGroups:
    - ""
  resources:
    - namespaces
    - pods
    - secrets
    - services
    - configmaps
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - apps
    - extensions
  resources:
    - deployments
    - daemonsets
    - statefulsets
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - policy
  resources:
    - poddisruptionbudgets
  verbs:
    - get
    - list
    - watch

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: magtape-write-crb
  labels:
    app: magtape
roleRef:
  kind: ClusterRole
  name: magtape-write
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: magtape-sa
  namespace: magtape-system

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: magtape-read-crb
  labels:
    app: magtape
roleRef:
  kind: ClusterRole
  name: magtape-read
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: magtape-sa
  namespace: magtape-system
---
# Define role for OPA/kube-mgmt to update configmaps with policy status.
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: magtape-ops
  namespace: magtape-system
  labels:
    app: magtape
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - patch
  - update

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: magtape-ops-rb
  namespace: magtape-system
  labels:
    app: magtape
roleRef:
  kind: Role
  name: magtape-ops
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: magtape-sa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: magtape-sa
  namespace: magtape-system
  labels:
    app: magtape

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: magtape-env
  namespace: magtape-system
  labels:
    app: magtape
data:
  FLASK_ENV: "production"
  PYTHONUNBUFFERED: "TRUE"
  MAGTAPE_CLUSTER_NAME: "test-cluster"
  MAGTAPE_LOG_LEVEL: "INFO"
  MAGTAPE_DENY_LEVEL: "LOW"
  MAGTAPE_K8S_EVENTS_ENABLED: "TRUE"
  MAGTAPE_SLACK_ENABLED: "TRUE"
  MAGTAPE_SLACK_PASSIVE: "FALSE"
  MAGTAPE_SLACK_WEBHOOK_URL_DEFAULT: "<SLACK_WEBJOOK_URL>"
  MAGTAPE_SLACK_USER: "mtbot"
  MAGTAPE_SLACK_ICON: ":rotating_light:"
  OPA_BASE_URL: "http://127.0.0.1:8181"
  OPA_K8S_PATH: "/v0/data/magtape"
---
apiVersion: v1
data:
  magtape-vwc: |
    apiVersion: admissionregistration.k8s.io/v1
    kind: ValidatingWebhookConfiguration
    metadata:
      name: magtape-webhook
      labels:
        app: magtape
    webhooks:
      - name: magtape.webhook.k8s.t-mobile.com
        admissionReviewVersions:
          - v1
        sideEffects: None
        clientConfig:
          service:
            name: magtape-svc
            namespace: magtape-system
            path: "/"
          caBundle:
        failurePolicy: Fail
        rules:
          - operations:
              - CREATE
              - UPDATE
            apiGroups:
              - "*"
            apiVersions:
              - "v1"
            resources:
              - "deployments"
              - "statefulsets"
              - "daemonsets"
              - "pods"
              - "poddisruptionbudgets"
        namespaceSelector:
          matchLabels:
            k8s.t-mobile.com/magtape: "enabled"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: magtape-vwc-template
  namespace: magtape-system

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: magtape-opa-default-main
  namespace: magtape-system
  labels:
    app: magtape
data:
  main: |
    package system

    import data.kubernetes.admission

    main = {
      "apiVersion": "admission.k8s.io/v1beta1",
      "kind": "AdmissionReview",
      "response": response,
    }

    default response = {"allowed": true}

    response = {
        "allowed": false,
        "status": {
            "reason": reason,
        },
    } {
        reason = concat(", ", admission.deny)
        reason != ""
    }
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: magtape-opa-entrypoint
  namespace: magtape-system
  labels:
    app: opa
    openpolicyagent.org/policy: rego

data:
  magtape.rego: |-
    package magtape

    # This acts as an entrypoint to call all policies under "kubernetes.admission"

    decisions[{"policy": p, "reasons": reasons}] {

      data.kubernetes.admission[p].matches
      reasons := data.kubernetes.admission[p].deny

    }

---
apiVersion: v1
kind: Service
metadata:
  name: magtape-svc
  labels:
    app: magtape
  namespace: magtape-system
spec:
  ports:
  - name: https
    port: 443
    targetPort: 5000
  selector:
    app: magtape
  sessionAffinity: None
  type: ClusterIP

---
# apiVersion: policy/v1beta1
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: magtape-pdb
  namespace: magtape-system
  labels:
    app: magtape
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: magtape

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: magtape
  namespace: magtape-system
  labels:
    app: magtape
spec:
  replicas: 1
  selector:
    matchLabels:
      app: magtape
  template:
    metadata:
      labels:
        app: magtape
    spec:
      serviceAccountName: magtape-sa
      securityContext:
        runAsUser: 1900
        runAsGroup: 1900
      initContainers:
        - name: magtape-init
          image: tmobile/magtape-init:v2.4.0
          command: [/app/magtape-init.py]
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
          env:
          - name: MAGTAPE_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MAGTAPE_NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          envFrom:
            - configMapRef:
                name: magtape-env
          volumeMounts:
          - name: magtape-tls
            mountPath: /tls
          - name: magtape-vwc
            mountPath: /vwc
      containers:
      - name: magtape
        image: tmobile/magtape:v2.4.0
        ports:
        - containerPort: 5000
        command: ["gunicorn", "magtape:app", "--config=config.py"]
        imagePullPolicy: Always
        securityContext:
            allowPrivilegeEscalation: false
        livenessProbe:
          httpGet:
            scheme: HTTPS
            port: 5000
            path: /healthz
          initialDelaySeconds: 3
          periodSeconds: 5
        readinessProbe:
          httpGet:
            scheme: HTTPS
            port: 5000
            path: /healthz
          initialDelaySeconds: 3
          periodSeconds: 5
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 128Mi
        env:
        - name: MAGTAPE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MAGTAPE_NAMESPACE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: magtape-env
        volumeMounts:
          - name: magtape-tls
            mountPath: /tls
      - name: opa
        # image: openpolicyagent/opa:0.37.2-static
        image: openpolicyagent/opa:0.62.1-static
        args:
          - "run"
          - "--server"
          - "--tls-cert-file=/tls/cert.pem"
          - "--tls-private-key-file=/tls/key.pem"
          - "--addr=0.0.0.0:8443"
          - "--addr=http://127.0.0.1:8181"
        securityContext:
            allowPrivilegeEscalation: false
        readinessProbe:
          httpGet:
            scheme: HTTPS
            port: 8443
            path: /health
          initialDelaySeconds: 3
          periodSeconds: 5
        livenessProbe:
          httpGet:
            scheme: HTTPS
            port: 8443
            path: /health
          initialDelaySeconds: 3
          periodSeconds: 5
        resources:
          limits:
            cpu: "500m"
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 128Mi
        volumeMounts:
          - name: magtape-tls
            mountPath: /tls
      - name: kube-mgmt
        # image: openpolicyagent/kube-mgmt:4.1.1
        image: openpolicyagent/kube-mgmt:8.5.5
        args:
          - "--policies=magtape-system"
          - "--require-policy-label=true"
          - "--namespaces=magtape-system"
        securityContext:
            allowPrivilegeEscalation: false
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 128Mi
      volumes:
        - name: magtape-vwc
          configMap:
              name: magtape-vwc-template
              items:
              - key: magtape-vwc
                path: magtape-vwc.yaml
        - name: magtape-tls
          emptyDir: {}
      terminationGracePeriodSeconds: 5
---

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: magtape
    magtape: hpa
  name: magtape
  namespace: magtape-system
spec:
  maxReplicas: 2
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: magtape
  targetCPUUtilizationPercentage: 80
---

apiVersion: v1
data:
  policy-emptydir-check.rego: "package kubernetes.admission.policy_emptydir\n\npolicy_metadata
    = {\n\t# Set MagTape Policy Info\n\t\"name\": \"policy-emptydir\",\n\t\"severity\":
    \"MED\",\n\t\"errcode\": \"MT1009\",\n\t\"targets\": {\"Pod\"},\n}\n\nkind = input.request.kind.kind\n\nsizeLimit
    = 100\n\nmatches {\n\t# Verify request object type matches targets\n\tpolicy_metadata.targets[kind]\n}\n\ndeny[info]
    {\n\t# Find volume spec\n\tvolumes := input.request.object.spec.volumes\n\texceed_err_msg
    := sprintf(\"is greater than %v Megabytes\", [sizeLimit])\n\n\t# Checks emptydir
    configuration\n\tvolume := volumes[_]\n\tname := volume.name\n\temptydir_state
    := check_emptydir(volume, exceed_err_msg, sizeLimit)\n\n\t# Build message to return\n\tmsg
    := sprintf(\"[FAIL] %v - Size limit of emptyDir volume \\\"%v\\\" %v (%v)\", [policy_metadata.severity,
    name, emptydir_state, policy_metadata.errcode])\n\n\tinfo := {\n\t\t\"name\":
    policy_metadata.name,\n\t\t\"severity\": policy_metadata.severity,\n\t\t\"errcode\":
    policy_metadata.errcode,\n\t\t\"msg\": msg,\n\t}\n}\n\n# check_emptydir accepts
    three values (volume, exceed_err_msg, sizeLimit) \n# returns whether there the
    sizeLimit configuration for emptyDir is present, in megaBytes, and below the sizeLimit
    set above\ncheck_emptydir(volume, exceed_err_msg, sizeLimit) = \"is not set\"
    {\n\tvolume.emptyDir\n\tnot volume.emptyDir.sizeLimit\n}\n\nelse = \"is not in
    Megabytes\" {\n\tvolume.emptyDir.sizeLimit\n\tnot endswith(trim_space(volume.emptyDir.sizeLimit),
    \"M\")\n}\n\nelse = exceed_err_msg {\n\tvolume.emptyDir.sizeLimit\n\tlimit :=
    to_number(trim(trim_space(volume.emptyDir.sizeLimit), \"M\"))\n\tlimit > sizeLimit\n}\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: opa
    openpolicyagent.org/policy: rego
  name: policy-emptydir-check
  namespace: magtape-system
---

apiVersion: v1
data:
  policy-host-path-check.rego: "package kubernetes.admission.policy_host_path\n\npolicy_metadata
    = {\n\t# Set MagTape Policy Info\n\t\"name\": \"policy-host-path\",\n\t\"severity\":
    \"MED\",\n\t\"errcode\": \"MT1010\",\n\t\"targets\": {\"Pod\"},\n}\n\nkind = input.request.kind.kind\n\nmatches
    {\n\t# Verify request object type matches targets\n\tpolicy_metadata.targets[kind]\n}\n\ndeny[info]
    {\n\t# Find volume spec\n\tvolumes := input.request.object.spec.volumes\n\n\t#
    Check for hostPath in each volume spec\n\tvolume := volumes[_]\n\tname := volume.name\n\thostpath_state
    := check_hostpath(volume)\n\n\t# Build message to return\n\tmsg := sprintf(\"[FAIL]
    %v - %v for volume \\\"%v\\\" (%v)\", [policy_metadata.severity, hostpath_state,
    name, policy_metadata.errcode])\n\n\tinfo := {\n\t\t\"name\": policy_metadata.name,\n\t\t\"severity\":
    policy_metadata.severity,\n\t\t\"errcode\": policy_metadata.errcode,\n\t\t\"msg\":
    msg,\n\t}\n}\n\n# check_hostpath accepts a value (volume)\n# returns whether there
    is a hostPath configured in the volume\ncheck_hostpath(volume) = \"hostPath is
    configured\" {\n\tvolume.hostPath\n}\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: opa
    openpolicyagent.org/policy: rego
  name: policy-host-path-check
  namespace: magtape-system
---

apiVersion: v1
data:
  policy-host-port-check.rego: "package kubernetes.admission.policy_hostport\n\npolicy_metadata
    = {\n\t# Set MagTape Policy Info\n\t\"name\": \"policy-hostport\",\n\t\"severity\":
    \"HIGH\",\n\t\"errcode\": \"MT1008\",\n\t\"targets\": {\"Pod\"},\n}\n\nkind =
    input.request.kind.kind\n\nmatches {\n\t# Verify request object type matches targets\n\tpolicy_metadata.targets[kind]\n}\n\ndeny[info]
    {\n\t# Find container spec\n\t# Since only target is Pod, containers will always
    be found in same place\n\tcontainers := input.request.object.spec.containers\n\n\t#
    Check for hostPort in each container spec\n\tcontainer := containers[_]\n\tname
    := container.name\n\tport_present := check_hostport(container)\n\n\t# Build message
    to return\n\tmsg := sprintf(\"[FAIL] %v - %v for container \\\"%v\\\" (%v)\",
    [policy_metadata.severity, port_present, name, policy_metadata.errcode])\n\n\tinfo
    := {\n\t\t\"name\": policy_metadata.name,\n\t\t\"severity\": policy_metadata.severity,\n\t\t\"errcode\":
    policy_metadata.errcode,\n\t\t\"msg\": msg,\n\t}\n}\n\n# check_hostport accepts
    a value (container) \n# returns whether the hostPort is found in config\ncheck_hostport(container)
    = \"hostPort is configured\" {\n\tports := container.ports[_]\n\tports.hostPort\n}\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: opa
    openpolicyagent.org/policy: rego
  name: policy-host-port-check
  namespace: magtape-system
---

apiVersion: v1
data:
  policy-liveness-probe-check.rego: "package kubernetes.admission.policy_liveness_probe\n\npolicy_metadata
    = {\n\t# Set MagTape Policy Info\n\t\"name\": \"policy-liveness-probe\",\n\t\"severity\":
    \"LOW\",\n\t\"errcode\": \"MT1001\",\n\t\"targets\": {\"Deployment\", \"StatefulSet\",
    \"DaemonSet\", \"Pod\"},\n}\n\nservicetype = input.request.kind.kind\n\nmatches
    {\n\t# Verify request object type matches targets\n\tpolicy_metadata.targets[servicetype]\n}\n\ndeny[info]
    {\n\t# Find container spec\n\tcontainers := find_containers(servicetype, policy_metadata)\n\n\t#
    Check for livenessProbe in each container spec\n\tcontainer := containers[_]\n\tname
    := container.name\n\tnot container.livenessProbe\n\n\t# Build message to return\n\tmsg
    = sprintf(\"[FAIL] %v - Liveness Probe missing for container \\\"%v\\\" (%v)\",
    [policy_metadata.severity, name, policy_metadata.errcode])\n\n\tinfo := {\n\t\t\"name\":
    policy_metadata.name,\n\t\t\"severity\": policy_metadata.severity,\n\t\t\"errcode\":
    policy_metadata.errcode,\n\t\t\"msg\": msg,\n\t}\n}\n\n# find_containers accepts
    a value (k8s object type) and returns the container spec\nfind_containers(type,
    metadata) = input.request.object.spec.containers {\n\ttype == \"Pod\"\n}\n\nelse
    = input.request.object.spec.template.spec.containers {\n\tmetadata.targets[type]\n}\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: opa
    openpolicyagent.org/policy: rego
  name: policy-liveness-probe-check
  namespace: magtape-system
---

apiVersion: v1
data:
  policy-node-port-range-check.rego: "package kubernetes.admission.policy_nodeport_range\n\nimport
    data.kubernetes.namespaces\n\npolicy_metadata = {\n\t# Set MagTape Policy Info\n\t\"name\":
    \"policy-nodeport-range\",\n\t\"severity\": \"MED\",\n\t\"errcode\": \"MT2002\",\n\t\"targets\":
    {\"Service\"},\n}\n\nkind = input.request.kind.kind\n\nsvc_type = input.request.object.spec.type\n\nexception_val
    = \"na\"\n\nmatches {\n\t# Verify request object type matches targets\n\t# Verify
    service is of type NodePort\n\tpolicy_metadata.targets[kind]\n\tsvc_type == \"NodePort\"\n}\n\n#
    Generate violation if nodePort Range is not within allocated range\ndeny[info]
    {\n\t# ns_name: namespace connected to service trying to be deployed\n\t# ports:
    where the hostport config is found within the service\n\t# np_range: pull the
    information connected to the nodeportRange label in the namespace yaml config\n\tns_name
    := input.request.namespace\n\tservice_name := input.request.object.metadata.name\n\tports
    := input.request.object.spec.ports\n\n\tport := ports[_]\n\tnp := port.nodePort\n\tnp_range
    := data.kubernetes.namespaces[ns_name].metadata.annotations[\"k8s.t-mobile.com/nodeportRange\"]\n\tport_in_range
    := check_nodeport_range(np, np_range)\n\n\t# Build message to return\n\tmsg :=
    sprintf(\"[FAIL] %v - nodePort %v %v for Service \\\"%v\\\" (%v)\", [policy_metadata.severity,
    np, port_in_range, service_name, policy_metadata.errcode])\n\n\tinfo := {\n\t\t\"name\":
    policy_metadata.name,\n\t\t\"severity\": policy_metadata.severity,\n\t\t\"errcode\":
    policy_metadata.errcode,\n\t\t\"msg\": msg,\n\t}\n}\n\n# Generate violation if
    annotation contains anything besides #, commas, hyphen, or exception_val\ndeny[info]
    {\n\t# ns_name: namespace connected to service trying to be deployed\n\t# ports:
    where the hostport config is found within the service\n\t# np_range: pull the
    information connected to the nodeportRange label in the namespace yaml config\n\tns_name
    := input.request.namespace\n\tservice_name := input.request.object.metadata.name\n\tports
    := input.request.object.spec.ports\n\n\tport := ports[_]\n\tnp_range := data.kubernetes.namespaces[ns_name].metadata.annotations[\"k8s.t-mobile.com/nodeportRange\"]\n\tannotation_valid
    := check_annotation(np_range, exception_val)\n\n\t# Build message to return\n\tmsg
    := sprintf(\"[FAIL] %v - Invalid data in nodePort annotation in \\\"%v\\\" namespace
    (%v)\", [policy_metadata.severity, ns_name, policy_metadata.errcode])\n\tinfo
    := {\n\t\t\"name\": policy_metadata.name,\n\t\t\"severity\": policy_metadata.severity,\n\t\t\"errcode\":
    policy_metadata.errcode,\n\t\t\"msg\": msg,\n\t}\n}\n\n# Check_annotation accepts
    two values (np, np_range)\n# Returns whether the nodeport range contains unknown
    symbols and is not the exception value\ncheck_annotation(np_range, exception_val)
    {\n\tnot re_match(`^[-, ]*[0-9 ]+(?:-[0-9 ]+)?(,[0-9 ]+(?:-[0-9 ]+)?)*[-, ]*$`,
    trim_space(np_range))\n\tlower(trim_space(np_range)) != exception_val\n}\n\n#
    Check_nodeport_range accepts two values (np, np_range) \n# Returns whether the
    nodeport(np) is within the range(np_range)\ncheck_nodeport_range(np, np_range)
    = \"is out of defined range\" {\n\tcontains(np_range, \"-\")\n\tcontains(np_range,
    \",\")\n\tre_match(`^[-, ]*[0-9 ]+(?:-[0-9 ]+)?(,[0-9 ]+(?:-[0-9 ]+)?)*[-, ]*$`,
    trim_space(np_range))\n\trange_split := split(np_range, \",\")\n\tnot range_matches_any(np,
    range_split)\n}\n\nelse = \"is out of defined range\" {\n\tcontains(np_range,
    \"-\")\n\tnot contains(np_range, \",\")\n\tre_match(`^[-, ]*[0-9 ]+(?:-[0-9 ]+)?(,[0-9
    ]+(?:-[0-9 ]+)?)*[-, ]*$`, trim_space(np_range))\n\tnot range_matches(np, np_range)\n}\n\nelse
    = \"is out of defined range\" {\n\tcontains(np_range, \",\")\n\tnot contains(np_range,
    \"-\")\n\tre_match(`^[-, ]*[0-9 ]+(?:-[0-9 ]+)?(,[0-9 ]+(?:-[0-9 ]+)?)*[-, ]*$`,
    trim_space(np_range))\n\trange_split := split(np_range, \",\")\n\tnot range_matches_any(np,
    range_split)\n}\n\nelse = \"is out of defined range\" {\n\tnot contains(np_range,
    \",\")\n\tnot contains(np_range, \"-\")\n\tre_match(`^\\d+$`, trim_space(np_range))\n\tto_number(trim_space(np_range))
    != to_number(np)\n}\n\nrange_matches_any(npNum, list) {\n\trange_matches(npNum,
    list[_])\n}\n\n# Checks if nodePort is in comma separated list\nrange_matches(npNum,
    list) {\n\tnot contains(list, \"-\")\n\tnot contains(list, \",\")\n\tcount(trim_space(list))
    > 0\n\n\tto_number(trim_space(list)) == to_number(npNum)\n}\n\n# Checks if nodePort
    is within range\nrange_matches(npNum, list) {\n\tcontains(list, \"-\")\n\trange_split
    := split(list, \"-\")\n\tcount(trim_space(range_split[0])) > 0\n\tcount(trim_space(range_split[1]))
    > 0\n\n\tto_number(npNum) >= to_number(trim_space(range_split[0]))\n\tto_number(npNum)
    <= to_number(trim_space(range_split[1]))\n}\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: opa
    openpolicyagent.org/policy: rego
  name: policy-node-port-range-check
  namespace: magtape-system
---

apiVersion: v1
data:
  policy-pdb-check.rego: "package kubernetes.admission.policy_pdb\n\npolicy_metadata
    = {\n\t# Set MagTape Policy Info\n\t\"name\": \"policy-pdb\",\n\t\"severity\":
    \"HIGH\",\n\t\"errcode\": \"MT1005\",\n\t\"targets\": {\"PodDisruptionBudget\"},\n}\n\nservicetype
    = input.request.kind.kind\n\nmatches {\n\t# Verify request object type matches
    targets\n\tpolicy_metadata.targets[servicetype]\n}\n\nlimits = {\n\t\"minAvailable\":
    [0, 66],\n\t\"maxUnavailable\": [33, 100],\n}\n\n# Generates a violation if the
    input doesn't specify a percentage (e.g., they used an absolute.)\ndeny[info]
    {\n\t# Get limit type\n\tlimits[name]\n\n\t# Get limit value\n\tvalue := input.request.object.spec[name]\n\n\t#
    Verify the value is a percentage\n\t[_, false] = get_percentage(value)\n\n\tmsg
    := sprintf(\"[FAIL] %v - Value \\\"%v\\\" for \\\"%v\\\" should be a Percentage,
    not an Integer (%v)\", [policy_metadata.severity, value, name, policy_metadata.errcode])\n\n\tinfo
    := {\n\t\t\"name\": policy_metadata.name,\n\t\t\"severity\": policy_metadata.severity,\n\t\t\"errcode\":
    policy_metadata.errcode,\n\t\t\"msg\": msg,\n\t}\n}\n\n# Generates a violation
    if the input specifes a percentage out-of-range.\ndeny[info] {\n\t# Get limit
    range\n\trange := limits[name]\n\n\t# Get the percentage value\n\t[percent, true]
    = get_percentage(input.request.object.spec[name])\n\n\t# Verify the percentage
    is within range\n\tnot within_range(percent, range)\n\n\tmsg := sprintf(\"[FAIL]
    %v - Value (%v%%) for \\\"%v\\\" not within range %v%%-%v%% (%v)\", [policy_metadata.severity,
    percent, name, range[0], range[1], policy_metadata.errcode])\n\n\tinfo := {\n\t\t\"name\":
    policy_metadata.name,\n\t\t\"severity\": policy_metadata.severity,\n\t\t\"errcode\":
    policy_metadata.errcode,\n\t\t\"msg\": msg,\n\t}\n}\n\nwithin_range(x, [_min,
    _max]) {\n\tx >= _min\n\tx <= _max\n}\n\n# get_percentage accepts a value and
    generates a tuple containing the \n# numeric percentage value and a boolean value
    indicating whether the\n# input value could be converted to a numeric percentage.\n#\n#
    Examples:\n#\n#   get_percentage(50) == [0, false]\n#   get_percentage(\"50\")
    == [0, false]\n#   get_percentage(\"50%\") == [50, true]\nget_percentage(value)
    = [0, false] {\n\tnot is_string(value)\n}\n\nelse = [0, false] {\n\tnot contains(value,
    \"%\")\n}\n\nelse = [percent, true] {\n\tpercent := to_number(trim(value, \"%\"))\n}\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: opa
    openpolicyagent.org/policy: rego
  name: policy-pdb-check
  namespace: magtape-system
---

apiVersion: v1
data:
  policy-port-name-mismatch.rego: "package kubernetes.admission.policy_port_name_mismatch\n\npolicy_metadata
    = {\n\t# Set MagTape Policy Info\n\t\"name\": \"policy-port-name-mismatch\",\n\t\"severity\":
    \"HIGH\",\n\t\"errcode\": \"MT1006\",\n\t\"targets\": {\"Service\"},\n}\n\nservicetype
    = input.request.kind.kind\n\nsvc_name := input.request.object.metadata.name\n\nmatches
    {\n\t# Verify request object type matches targets\n\tpolicy_metadata.targets[servicetype]\n}\n\ndeny[info]
    {\n\t# Find service ports\n\tports := input.request.object.spec.ports\n\n\t# Check
    all port spec's\n\tport := ports[_]\n\tport_name := port.name\n\tport_number :=
    port.port\n\n\t# Check for mismatch between logical port name and port number
    in service spec\n\tport_name == \"http\"\n\tport_number == 443\n\n\tmsg = sprintf(\"[FAIL]
    %v - Logical port name \\\"%v\\\" mismatch with port number \\\"%v\\\" for service
    \\\"%v\\\" (%v)\", [policy_metadata.severity, port_name, port_number, svc_name,
    policy_metadata.errcode])\n\n\tinfo := {\n\t\t\"name\": policy_metadata.name,\n\t\t\"severity\":
    policy_metadata.severity,\n\t\t\"errcode\": policy_metadata.errcode,\n\t\t\"msg\":
    msg,\n\t}\n}\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: opa
    openpolicyagent.org/policy: rego
  name: policy-port-name-mismatch
  namespace: magtape-system
---

apiVersion: v1
data:
  policy-privileged-pod-check.rego: "package kubernetes.admission.policy_privileged_pod\n\npolicy_metadata
    = {\n\t# Set MagTape Policy Info\n\t\"name\": \"policy-privileged-pod\",\n\t\"severity\":
    \"HIGH\",\n\t\"errcode\": \"MT2001\",\n\t\"targets\": {\"Deployment\", \"StatefulSet\",
    \"DaemonSet\", \"Pod\"},\n}\n\nservicetype = input.request.kind.kind\n\nmatches
    {\n\t# Verify request object type matches targets\n\tpolicy_metadata.targets[servicetype]\n}\n\ndeny[info]
    {\n\t# Find container spec\n\tcontainers := find_containers(servicetype, policy_metadata)\n\n\t#
    Check for Privileged SecurityContext in container spec\n\tcontainer := containers[_]\n\tname
    := container.name\n\tcontainer.securityContext.privileged\n\n\tmsg = sprintf(\"[FAIL]
    %v - Found privileged Security Context for container \\\"%v\\\" (%v)\", [policy_metadata.severity,
    name, policy_metadata.errcode])\n\n\tinfo := {\n\t\t\"name\": policy_metadata.name,\n\t\t\"severity\":
    policy_metadata.severity,\n\t\t\"errcode\": policy_metadata.errcode,\n\t\t\"msg\":
    msg,\n\t}\n}\n\n# find_containers accepts a value (k8s object type) and returns
    the container spec\nfind_containers(type, metadata) = input.request.object.spec.containers
    {\n\ttype == \"Pod\"\n}\n\nelse = input.request.object.spec.template.spec.containers
    {\n\tmetadata.targets[type]\n}\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: opa
    openpolicyagent.org/policy: rego
  name: policy-privileged-pod-check
  namespace: magtape-system
---

apiVersion: v1
data:
  policy-readiness-probe-check.rego: "package kubernetes.admission.policy_readiness_probe\n\npolicy_metadata
    = {\n\t# Set MagTape Policy Info\n\t\"name\": \"policy-readiness-probe\",\n\t\"severity\":
    \"LOW\",\n\t\"errcode\": \"MT1002\",\n\t\"targets\": {\"Deployment\", \"StatefulSet\",
    \"DaemonSet\", \"Pod\"},\n}\n\nservicetype = input.request.kind.kind\n\nmatches
    {\n\t# Verify request object type matches targets\n\tpolicy_metadata.targets[servicetype]\n}\n\ndeny[info]
    {\n\t# Find container spec\n\tcontainers := find_containers(servicetype, policy_metadata)\n\n\t#
    Check for ReadinessProbe in each container spec\n\tcontainer := containers[_]\n\tname
    := container.name\n\tnot container.readinessProbe\n\n\t# Build message to return\n\tmsg
    = sprintf(\"[FAIL] %v - Readiness Probe missing for container \\\"%v\\\" (%v)\",
    [policy_metadata.severity, name, policy_metadata.errcode])\n\n\tinfo := {\n\t\t\"name\":
    policy_metadata.name,\n\t\t\"severity\": policy_metadata.severity,\n\t\t\"errcode\":
    policy_metadata.errcode,\n\t\t\"msg\": msg,\n\t}\n}\n\n# find_containers accepts
    a value (k8s object type) and returns the container spec\nfind_containers(type,
    metadata) = input.request.object.spec.containers {\n\ttype == \"Pod\"\n}\n\nelse
    = input.request.object.spec.template.spec.containers {\n\tmetadata.targets[type]\n}\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: opa
    openpolicyagent.org/policy: rego
  name: policy-readiness-probe-check
  namespace: magtape-system
---

apiVersion: v1
data:
  policy-resource-limits-check.rego: "package kubernetes.admission.policy_resource_limits\n\npolicy_metadata
    = {\n\t# Set MagTape Policy Info\n\t\"name\": \"policy-resource-limits\",\n\t\"severity\":
    \"LOW\",\n\t\"errcode\": \"MT1003\",\n\t\"targets\": {\"Deployment\", \"StatefulSet\",
    \"DaemonSet\", \"Pod\"},\n}\n\nservicetype = input.request.kind.kind\n\nmatches
    {\n\t# Verify request object type matches targets\n\tpolicy_metadata.targets[servicetype]\n}\n\ndeny[info]
    {\n\t# Find container spec\n\tcontainers := find_containers(servicetype, policy_metadata)\n\n\t#
    Check for livenessProbe in container spec\n\tcontainer := containers[_]\n\tname
    := container.name\n\tresource_type := get_resource_type(container)\n\n\t# Build
    message to return\n\tmsg = sprintf(\"[FAIL] %v - Resource limits missing (%v)
    for container \\\"%v\\\" (%v)\", [policy_metadata.severity, resource_type, name,
    policy_metadata.errcode])\n\n\tinfo := {\n\t\t\"name\": policy_metadata.name,\n\t\t\"severity\":
    policy_metadata.severity,\n\t\t\"errcode\": policy_metadata.errcode,\n\t\t\"msg\":
    msg,\n\t}\n}\n\n# find_containers accepts a value (k8s object type) and returns
    the container spec\nfind_containers(type, metadata) = input.request.object.spec.containers
    {\n\ttype == \"Pod\"\n}\n\nelse = input.request.object.spec.template.spec.containers
    {\n\tmetadata.targets[type]\n}\n\n# get_resource_type accepts a value (containers)
    and returns the missing resource type based on missing limits\nget_resource_type(container)
    = \"CPU/MEM\" {\n\tnot container.resources.limits.cpu\n\tnot container.resources.limits.memory\n}\n\nelse
    = \"CPU\" {\n\tnot container.resources.limits.cpu\n}\n\nelse = \"MEM\" {\n\tnot
    container.resources.limits.memory\n}\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: opa
    openpolicyagent.org/policy: rego
  name: policy-resource-limits-check
  namespace: magtape-system
---

apiVersion: v1
data:
  policy-resource-requests-check.rego: "package kubernetes.admission.policy_resource_requests\n\npolicy_metadata
    = {\n\t# Set MagTape Policy Info\n\t\"name\": \"policy-resource-requests\",\n\t\"severity\":
    \"LOW\",\n\t\"errcode\": \"MT1004\",\n\t\"targets\": {\"Deployment\", \"StatefulSet\",
    \"DaemonSet\", \"Pod\"},\n}\n\nservicetype = input.request.kind.kind\n\nmatches
    {\n\t# Verify request object type matches targets\n\tpolicy_metadata.targets[servicetype]\n}\n\ndeny[info]
    {\n\t# Find container spec\n\tcontainers := find_containers(servicetype, policy_metadata)\n\n\t#
    Check for livenessProbe in each container spec\n\tcontainer := containers[_]\n\tname
    := container.name\n\tresource_type := get_resource_type(container)\n\n\t# Build
    message to return\n\tmsg := sprintf(\"[FAIL] %v - Resource requests missing (%v)
    for container \\\"%v\\\" (%v)\", [policy_metadata.severity, resource_type, name,
    policy_metadata.errcode])\n\n\tinfo := {\n\t\t\"name\": policy_metadata.name,\n\t\t\"severity\":
    policy_metadata.severity,\n\t\t\"errcode\": policy_metadata.errcode,\n\t\t\"msg\":
    msg,\n\t}\n}\n\n# find_containers accepts a value (k8s object type) and returns
    the container spec\nfind_containers(type, metadata) = input.request.object.spec.containers
    {\n\ttype == \"Pod\"\n}\n\nelse = input.request.object.spec.template.spec.containers
    {\n\tmetadata.targets[type]\n}\n\n# get_resource_type accepts a value (containers)
    and returns the missing resource type based on missing limits\nget_resource_type(container)
    = \"CPU/MEM\" {\n\tnot container.resources.requests.cpu\n\tnot container.resources.requests.memory\n}\n\nelse
    = \"CPU\" {\n\tnot container.resources.requests.cpu\n}\n\nelse = \"MEM\" {\n\tnot
    container.resources.requests.memory\n}\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: opa
    openpolicyagent.org/policy: rego
  name: policy-resource-requests-check
  namespace: magtape-system
---

apiVersion: v1
data:
  policy-singleton-pod-check.rego: "package kubernetes.admission.policy_singleton_pod_check\n\npolicy_metadata
    = {\n\t# Set MagTape Policy Info\n\t\"name\": \"policy-singleton-pod-check\",\n\t\"severity\":
    \"LOW\",\n\t\"errcode\": \"MT1007\",\n\t\"targets\": {\"Pod\"},\n}\n\nkind = input.request.kind.kind\n\nmatches
    {\n\t# Verify request object type matches targets\n\tpolicy_metadata.targets[kind]\n}\n\ndeny[info]
    {\n\tname := input.request.object.metadata.name\n\n\t# Check for ownerReferences,
    will only be present if something is dependent on the Pod\n\tnot input.request.object.metadata.ownerReferences\n\n\t#
    Build message to return\n\tmsg := sprintf(\"[FAIL] %v - \\\"%v\\\" is a singleton
    pod. (%v)\", [policy_metadata.severity, name, policy_metadata.errcode])\n\n\tinfo
    := {\n\t\t\"name\": policy_metadata.name,\n\t\t\"severity\": policy_metadata.severity,\n\t\t\"errcode\":
    policy_metadata.errcode,\n\t\t\"msg\": msg,\n\t}\n}\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: opa
    openpolicyagent.org/policy: rego
  name: policy-singleton-pod-check
  namespace: magtape-system
---
