apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sdeprolens
  labels:
    policy.jimmyray.io/gatekeeper: template 
spec:
  crd:
    spec:
      names:
        kind: K8sDepRoleNs
        # listKind: K8sDepRoleNsList
        # plural: k8sdeprolens
        # singular: k8sdeprolens
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            allowedOps:
              type: array
              items:
                type: string
            errMsg:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      libs: 
        - |
          package lib.k8s.helpers

          allowed_operations = value {
            value := {"CREATE", "UPDATE"}
          }

          review_operation = value {
            value := input.review.operation
          }

          review_metadata_labels = value {
            value := input.review.object.metadata.labels
          }

          review_spec_template_metadata_labels = value {
            value := input.review.object.spec.template.metadata.labels
          }

          deployment_error = value {
            value := "DEPLOYMENT_INVALID"
          }

          deployment_containers = value {
            value := input.review.object.spec.template.spec.containers
          }

          deployment_role = value {
            value := input.review.object.spec.template.metadata.annotations["iam.amazonaws.com/role"]
          }

          review_id = value {
            value := sprintf("%v/%v/%v", [
              review_namespace,
              review_name,
              review_kind
            ])
          }

          review_name = value {
            value := input.review.object.metadata.name
          }

          else = value {
            value := "NOT_FOUND"
          }

          review_namespace = value {
            value := input.review.object.metadata.namespace
          }

          else = value {
            value := "NOT_FOUND"
          }

          review_kind = value {
            value := input.review.kind.kind
          }

          else = value {
            value := "NOT_FOUND"
          }
      rego: |
        package k8sdepregistry

        import data.lib.k8s.helpers as helpers

        violation[{"msg": msg, "details": {}}] {
          helpers.review_operation = input.parameters.allowedOps[_]
          role := helpers.deployment_role
          namespace := helpers.review_namespace
          not ns_roles_allowed(namespace,role)
          msg := sprintf("%v: %v role is not allowed for the %q namespace. Resource ID (ns/name/kind): %q", [input.parameters.errMsg,role,namespace,helpers.review_id])
        }

        ns_roles_allowed(n,r) {
          # a dictionary mapping each namespace to a set of permitted roles for that namespace
            allowed := {
              "prod": {"arn:aws:iam::123456789012:role/prod"},
              "dev": {"arn:aws:iam::123456789012:role/dev","arn:aws:iam::123456789012:role/test"},
              "policy-test": {"arn:aws:iam::123456789012:role/test"},
            }
            allowed[n][r]
        }

